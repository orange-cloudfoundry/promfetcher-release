---
name: promfetcher

templates:
  dns/aliases.json.erb: dns/aliases.json
  bpm.yml: config/bpm.yml
  config.yml.erb: config/config.yml
  drain.sh: bin/drain

packages:
  - promfetcher

consumes:
- name: nats
  type: nats
  optional: true
- name: nats-tls
  type: nats-tls
  optional: true

properties:

  promfetcher.port:
    default: 443
    description: |
      Port for listening
  promfetcher.health_check_port:
    default: 8080
    description: |
      Port for listening health check
  promfetcher.base_url:
    default: ""
    description: |
      External url which give docs url to user
      This is an url pointing on this service of course
      using it let you separate logs part from user part
  promfetcher.broker.enable:
    description: If set to false broker will not become useable but database can be remove
    default: true
  promfetcher.broker.username:
    description: Broker username basic auth
  promfetcher.broker.password:
    description: Broker pass basic auth
  promfetcher.broker.service_id:
    description: Broker service id
    default: e44a55b7-b532-4247-89f3-4ea92054b793
  promfetcher.broker.plan_id:
    description: Broker plan id
    default: 3294e4fa-42b3-4505-b289-8fb3695b5b3a

  promfetcher.skip_ssl_validation:
    description: "not used"
    default: false
  promfetcher.enable_ssl:
    description: "not used"
    default: true

  promfetcher.max_idle_connections:
    default: 100
    description: |
      When a number greater than zero, keepalives are enabled, and Gorouter will keep up to this number of idle keepalive connections open across all backends.
      When keepalive connections are enabled, the maximum number of idle keepalive connections Gorouter will keep open to an individual backend is 100, which cannot be changed.
  promfetcher.disable_keep_alives:
    description: "Disable keep alive"
    default: false
  promfetcher.idle_conn_timeout:
    default: 30
    description: "Timeout for idle connections (keepalive connections)"

  promfetcher.database.user:
    description: ""
  promfetcher.database.password:
    description: ""
  promfetcher.database.host:
    description: ""
    default: "sql-db.service.cf.internal"
  promfetcher.database.name:
    description: ""
  promfetcher.database.port:
    description: ""
    default: 3306
  promfetcher.database.cnx.max_open:
    description: "Set the maximum number of open connections to the database"
    default: "10"
  promfetcher.database.cnx.max_idle:
    description: "Set the maximum number of connections in the idle"
    default: "5"
  promfetcher.database.cnx.max_life:
    description: "Set the maximum amount of time a connection may be reused. this is a duration which must be write like: `1h` for one hour or `1d` for one day ..."
    default: "1h"
  promfetcher.log_level:
    description: |
      log level to use for server
      you can chose: `trace`, `debug`, `info`, `warn`, `error`, `fatal` or `panic`
    default: "info"

  promfetcher.tls_pem.private_key:
    description: "private key for serving TLS requests. Required if promfetcher.enable_ssl is true."
  promfetcher.tls_pem.cert_chain:
    description: "certificate for serving TLS requests. Required if promfetcher.enable_ssl is true."
  promfetcher.ca_certs:
    description: "Required. String of concatenated certificate authorities in PEM format, used to validate certificates provided by remote systems. By default, Gorouter will trust certificates signed by well-known CAs and by CA certificates installed on the filesystem."

  promfetcher.backends.cert_chain:
    description: Certificate chain used for client authentication to TLS-registered backends.  In PEM format.
  promfetcher.backends.private_key:
    description: Private key used for client authentication to TLS-registered backends.  In PEM format.
  promfetcher.backends.max_conns:
    description: "Maximum concurrent TCP connections per backend. When set to 0 there is no limit"
    default: 500


  nats.user:
    description: User name for NATS authentication
    example: nats
  nats.password:
    description: Password for NATS authentication
    example: natSpa55w0rd
  nats.port:
    description: TCP port of NATS servers
    example: 4222
  nats.machines:
    description: IPs of each NATS cluster member
    example: |
      - 192.168.50.123
      - 192.168.52.123
  nats.tls_enabled:
    description: When enabled, Gorouter will prefer to connect to NATS over TLS
    default: true
  nats.ca_certs:
    description: "String of concatenated certificate authorities in PEM format, used to validate certificates presented by NATS."
  nats.cert_chain:
    description: Certificate chain used for client authentication to NATS. In PEM format.
  nats.private_key:
    description: Private key used for client authentication to NATS. In PEM format.
  
  promfetcher.droplet_stale_threshold:
    description: "Promfetcher will prune routes that it considers to be stale based upon droplet_stale_threshold value"
    default: 120s
  promfetcher.start_response_delay_interval:
    description: |
      On startup, Promfetcher will delay listening for requests by this duration to increase likelihood that it has a complete routing table before serving requests.
      Promfetcher also broadcasts the same duration as a recommended interval to registering clients via NATS.
      This must be less than 60, otherwise monit will mark the process as failed.
    default: 20s

  promfetcher.external_exporters:
    description: |
      external exporters to retrieve metrics from which let you take route tags and use it on them
    default: [ ]
    example:
      - name: name-of-exporter
        # required
        host: exporter.com:8086
        # or can be https
        scheme: http
        # default to /metrics
        metrics_path: /metrics
        # on value you have access to variable as template value (this is go template):
        #  ProcessType
        #  ProcessInstanceID
        #  Component
        #  SpaceName
        #  OrganizationID
        #  ProcessID
        #  OrganizationName
        #  SourceID
        #  AppID
        #  AppName
        #  SpaceID
        params:
          source_id[]: [ "{{.AppID}}" ]
