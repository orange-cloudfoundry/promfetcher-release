---

<%=
def property_or_link(description, property, link_path, link_name=nil, optional=false)
  link_name ||= link_path.split('.').first
  if_p(property) do |prop|
    return prop
  end.else do
    if_link(link_name) do |link_object|
      link_object.if_p(link_path) do |prop|
        return prop
      end
    end
  end
  if optional
    return nil
  end
  raise RuntimeError, "#{description} not found in properties nor in \"#{link_name}\" link. This value can be specified using the \"#{property}\" property."
end

nats = {}

nats_link_name = 'nats'
if p("nats.tls_enabled")
  nats_link_name = 'nats-tls'

  nats_ca_certs = property_or_link(
    'NATS server CA certificate',
    'nats.ca_certs',
    "nats.external.tls.ca",
    link_name=nats_link_name,
  )
  if !nats_ca_certs.is_a?(String)
    raise 'nats.ca_certs must be provided as a single string block'
  end

  nats_cert_chain = ''
  nats_private_key = ''
  if_p("nats.cert_chain") { |val| nats_cert_chain = val }
  if_p("nats.private_key") { |val| nats_private_key = val }

  if (nats_cert_chain != '') ^ (nats_private_key != '')
    raise 'nats.cert_chain and nats.private_key must be both provided or not at all'
  end
  if !nats_cert_chain.is_a?(String)
    raise 'nats.cert_chain must be provided as a single string block'
  end

  nats['tls_enabled'] = true
  nats['ca_certs'] = nats_ca_certs
  nats['cert_chain'] = nats_cert_chain
  nats['private_key'] = nats_private_key
end

nats_port = property_or_link(
  'NATS server port number',
  'nats.port',
  "nats.port",
  link_name=nats_link_name,
)

nats_machines = nil
if_p('nats.machines') do |ips|
  nats_machines = ips.compact
end.else do
  link(nats_link_name).if_p('nats.hostname') do |hostname|
    nats_machines = [hostname]
  end.else do
    nats_machines = link(nats_link_name).instances.map { |instance| instance.address }
  end
end
nats['hosts'] = nats_machines.map { |hostname| {'hostname' => hostname, 'port' => nats_port} }

nats_user = property_or_link(
  'NATS server username',
  'nats.user',
  "nats.user",
  link_name=nats_link_name,
  optional=true,
)
if nats_user
  nats['user'] = nats_user
end
nats_pass = property_or_link(
  'NATS server username',
  'nats.password',
  "nats.password",
  link_name=nats_link_name,
  optional=true,
)
if nats_pass
  nats['pass'] = nats_pass
end

{ "nats" => nats }.to_yaml[3..-1]
%>

start_response_delay_interval: <%= p("promfetcher.start_response_delay_interval") %>
droplet_stale_threshold: <%= p("promfetcher.droplet_stale_threshold") %>

<%=
  backend_cert_chain = ''
  backend_private_key = ''
  if_p("promfetcher.backends.cert_chain") { |val| backend_cert_chain = val }
  if_p("promfetcher.backends.private_key") { |val| backend_private_key = val }

  if (backend_cert_chain != '') ^ (backend_private_key != '')
    raise 'backends.cert_chain and backends.private_key must be both provided or not at all'
  end

  backends = {
    "max_conns" => p("promfetcher.backends.max_conns"),
    "cert_chain" => backend_cert_chain,
    "private_key" => backend_private_key,
  }

  { "backends" => backends }.to_yaml[3..-1]
%>

<% if p("promfetcher.enable_ssl") %>
<%=
  tls_cert_chain = ''
  tls_private_key = ''
  if_p("promfetcher.tls_pem.cert_chain") { |val| tls_cert_chain = val }
  if_p("promfetcher.tls_pem.private_key") { |val| tls_private_key = val }

  if (tls_cert_chain != '') ^ (tls_private_key != '')
    raise 'tls_pem.cert_chain and tls_pem.private_key must be both provided'
  end

  tls_pem = {
    "cert_chain" => tls_cert_chain,
    "private_key" => tls_private_key,
  }

  { "tls_pem" => tls_pem }.to_yaml[3..-1]
%>
<% end %>
<% if p("promfetcher.ca_certs")
 ca_certs = p("promfetcher.ca_certs")
 if !ca_certs.is_a?(String)
   raise 'ca_certs must be provided as a single string block'
 end
%>
<%= { 'ca_certs' => ca_certs }.to_yaml[3..-1] %>
<% end %>
skip_ssl_validation: <%= p("promfetcher.skip_ssl_validation") %>
enable_ssl: <%= p("promfetcher.enable_ssl") %>
base_url: <%= p("promfetcher.base_url") %>
port: <%= p("promfetcher.port") %>
health_check_port: <%= p("promfetcher.health_check_port") %>
logging:
  level: <%= p("promfetcher.log_level") %>
  in_json: true

<% if p("promfetcher.broker.enable") %>
db_conn: mysql://<%= p("promfetcher.database.user") %>:<%= p("promfetcher.database.password") %>@<%= p("promfetcher.database.host") %>:<%= p("promfetcher.database.port") %>/<%= p("promfetcher.database.name") %>
sql_cnx_max_idle: <%= p("promfetcher.database.cnx.max_idle") %>
sql_cnx_max_open: <%= p("promfetcher.database.cnx.max_open") %>
sql_cnx_max_life: <%= p("promfetcher.database.cnx.max_life") %>
<% end %>
disable_keep_alives: <%= p("promfetcher.disable_keep_alives") %>
max_idle_conns: <%= p("promfetcher.max_idle_connections") %>
max_idle_conns_per_host: 100
idle_conn_timeout: <%= p("promfetcher.idle_conn_timeout") %>

broker:
  broker_service_id: <%= p("promfetcher.broker.service_id") %>
  broker_plan_id: <%= p("promfetcher.broker.plan_id") %>
  user: <%= p("promfetcher.broker.username") %>
  pass: <%= p("promfetcher.broker.password") %>

external_exporters: <%= p('promfetcher.external_exporters').to_json %>
